mqtt4kafka {

  mqtt {
    # we listen on the same box as the mqtt broker and just publish to kafka, hence 'localhost'
    serverURI: "tcp://localhost:1883"
    serverURI: ${?MQTT_URI}

    # our client connection id
    clientId: "mqtt4kafka"

    # the quality of service to use for each subscribed topic.
    # we could do this as topic/qos tuples in the 'topics' array, but realistically we won't
    # need that fine-grained support of topic to unique QoS, and so doing it this way simplifies things
    # both on the command-line and by overriding values
    qos: 1

    # a list of MQTT topics to which we should subscribe
    topics: []

    cleanSession: true

    automaticReconnect: true

    # will be in-memory unless this is empty
    persistenceDir: ""

    # will set the MQTT user if non-empty
    userName: ""

    # will set the MQTT password if non-empty
    password: ""
  }

  topics: {
    # any entries under here will map the MQTT topics to kafka topics
    # they are all taken as literal mappings. e.g.
    # {
    #   mqttTopic1 : kafkaTopicOne
    #   mqttTopic2 : kafkaTopicTwo
    # }
    mapping: {

    }
  }


  kafka {

    # how often to flush - either max messages received or time elapsed, whichever comes first
    flushEvery: 1s

    bootstrap.servers: "localhost:9092"
    bootstrap.servers: ${?KAFKA_URI}

    acks: "all"
    request.timeout.ms: 30000
    delivery.timeout.ms: 60000
    batch.size: 16384
    linger.ms: 1
    buffer.memory: 33554432

    # org.apache.kafka.common.serialization.ByteBufferDeserializer
    key.serializer: "org.apache.kafka.common.serialization.StringSerializer"
    value.serializer: "org.apache.kafka.common.serialization.ByteArraySerializer"

  }
}